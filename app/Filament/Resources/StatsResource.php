<?php

namespace App\Filament\Resources;

use App\Filament\Resources\StatsResource\Pages;
use App\Models\Vendor;
use Filament\Forms;
use Filament\Tables;
use Filament\Resources\Resource;
use Illuminate\Database\Eloquent\Builder;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Filters\Filter;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Select;
use App\Models\GeoPreset;
use Illuminate\Support\Facades\DB;

class StatsResource extends Resource
{
    protected static ?string $model = Vendor::class;

    protected static ?string $navigationIcon = 'heroicon-o-chart-bar';
    protected static ?string $navigationLabel = '–î–æ—Ö–æ–¥';
    protected static ?string $navigationGroup = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ';
    protected static ?string $title = '–î–æ—Ö–æ–¥';

    public static function table(Tables\Table $table): Tables\Table
    {
        return $table
            ->modifyQueryUsing(function (Builder $query) {
                return $query
                    ->withCount([
                        'accounts',
                        'accounts as valid_accounts_count' => function (Builder $q) {
                            $q->where('type', 'valid');
                        },
                        'accounts as dead_accounts_count' => function (Builder $q) {
                            $q->where('type', 'dead');
                        },
                    ]);
            })
            ->columns([
                TextColumn::make('copy_name')
                    ->label('')
                    ->state('üìã')  // –≠–º–æ–¥–∑–∏ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
                    ->copyable()
                    ->copyableState(fn(Vendor $record): string => $record->name)
                    ->copyMessage('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ')
                    ->copyMessageDuration(2000),
                TextColumn::make('name')
                    ->label('–ü—Ä–æ–¥–∞–≤–µ—Ü')
                    ->searchable()
                    ->sortable()
                    ->url(fn(Vendor $record): string => route('vendor.profile', $record->id)),

                TextColumn::make('survival_percent')
                    ->label('–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏')
                    ->formatStateUsing(fn($state) => number_format($state, 2) . '%')
                    ->color(function (Vendor $record) {
                        $total = $record->accounts_count ?? 0;
                        if ($total === 0) return 'gray';
                        $valid = $record->valid_accounts_count ?? 0;
                        $percent = round(($valid / $total) * 100, 2);
                        return \App\Models\Settings::getColorForValue('survival_rate', $percent) ?? 'gray';
                    })
                    ->state(function (Vendor $record) {
                        $total = $record->accounts_count ?? 0;
                        if ($total === 0) return 0;
                        $valid = $record->valid_accounts_count ?? 0;
                        return round(($valid / $total) * 100, 2);
                    })
                    ->sortable(),

                TextColumn::make('accounts_count')
                    ->label('–ö–æ–ª-–≤–æ –∞–∫–∫–æ–≤')
                    ->sortable(),

                TextColumn::make('total_spent')
                    ->label('–ü–æ—Ç—Ä–∞—á–µ–Ω–æ')
                    ->money('RUB')
                    ->state(function (Vendor $record) {
                        return $record->accounts()->sum('price');
                    })
                    ->sortable(),

                TextColumn::make('total_earned')
                    ->label('–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ')
                    ->money('RUB')
                    ->state(function (Vendor $record) {
                        $soldPrice = request('tableFilters.sold_price.sold_price', 0);
                        return $record->valid_accounts_count * $soldPrice;
                    })
                    ->sortable(),

                TextColumn::make('avg_invite_price')
                    ->label('–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏–Ω–≤–∞–π—Ç–∞')
                    ->money('RUB')
                    ->state(function (Vendor $record) {
                        // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–¥–∞–≤—Ü–∞
                        $vendorId = $record->id;

                        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≥–µ–æ
                        $geoFilters = request('tableFilters.geo.geo', []);
                        $hasGeoFilter = !empty($geoFilters);

                        // –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –≥–µ–æ
                        $geoCondition = '';
                        $params = [$vendorId];

                        if ($hasGeoFilter) {
                            $placeholders = implode(',', array_fill(0, count($geoFilters), '?'));
                            $geoCondition = "AND geo IN ($placeholders)";
                            $params = array_merge($params, $geoFilters);
                        }

                        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä—è–º–æ–π SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                        $result = DB::select("
                            SELECT 
                                SUM(price) as total_price,
                                SUM(stats_invites_count) as total_invites
                            FROM 
                                accounts
                            WHERE 
                                vendor_id = ?
                                $geoCondition
                        ", $params);

                        if (empty($result)) {
                            return 0;
                        }

                        $totalPrice = $result[0]->total_price ?? 0;
                        $totalInvites = $result[0]->total_invites ?? 0;

                        // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                        if ($totalInvites <= 0) {
                            return 0;
                        }

                        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∑–∞ –∏–Ω–≤–∞–π—Ç
                        return round($totalPrice / $totalInvites, 2);
                    })
                    ->sortable(),

                TextColumn::make('total_invites')
                    ->label('–°—É–º–º–∞ –∏–Ω–≤–∞–π—Ç–æ–≤')
                    ->state(function (Vendor $record) {
                        return $record->accounts()->sum('stats_invites_count');
                    })
                    ->sortable(),

                TextColumn::make('total_profit')
                    ->label('–ò—Ç–æ–≥')
                    ->money('RUB')
                    ->color(fn($state) => $state >= 0 ? 'success' : 'danger')
                    ->state(function (Vendor $record) {
                        $spent = $record->accounts()->sum('price');
                        $soldPrice = request('tableFilters.sold_price.sold_price', 0);
                        $earned = $record->valid_accounts_count * $soldPrice;
                        return $earned - $spent;
                    })
                    ->sortable(),
            ])
            ->filters([
                Filter::make('geo')
                    ->form([
                        Select::make('preset')
                            ->label('–ì–µ–æ –ø—Ä–µ—Å–µ—Ç')
                            ->options(GeoPreset::pluck('name', 'id'))
                            ->afterStateUpdated(function ($state, callable $set) {
                                if ($state) {
                                    $preset = GeoPreset::find($state);
                                    $set('geo', $preset->geos);
                                }
                            }),

                        Select::make('geo')
                            ->label('–ì–µ–æ')
                            ->multiple()
                            ->searchable()
                            ->options(
                                \App\Models\Account::query()
                                    ->whereNotNull('geo')
                                    ->distinct()
                                    ->pluck('geo', 'geo')
                                    ->toArray()
                            )
                    ])
                    ->query(function (Builder $query, array $data) {
                        if (!empty($data['geo'])) {
                            $geo = $data['geo'];
                            $query->whereHas('accounts', function ($q) use ($geo) {
                                $q->whereIn('geo', $geo);
                            });
                        }
                        return $query;
                    }),

                Filter::make('date')
                    ->form([
                        Forms\Components\DatePicker::make('date_from')
                            ->label('–û—Ç'),
                        Forms\Components\DatePicker::make('date_to')
                            ->label('–î–æ'),
                    ])
                    ->query(function (Builder $query, array $data) {
                        if (!empty($data['date_from']) || !empty($data['date_to'])) {
                            $query->whereHas('accounts', function ($q) use ($data) {
                                if (!empty($data['date_from'])) {
                                    $q->whereDate('session_created_at', '>=', $data['date_from']);
                                }
                                if (!empty($data['date_to'])) {
                                    $q->whereDate('session_created_at', '<=', $data['date_to']);
                                }
                            });
                        }
                        return $query;
                    }),

                Filter::make('sold_price')
                    ->form([
                        TextInput::make('sold_price')
                            ->label('–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏')
                            ->numeric()
                            ->default(0)
                            ->live()
                    ])
                    ->query(function (Builder $query, array $data) {
                        // –ù–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
                        return $query;
                    }),
            ])
            ->persistFiltersInSession(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Å–µ—Å—Å–∏–∏
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListStats::route('/'),
        ];
    }
}
